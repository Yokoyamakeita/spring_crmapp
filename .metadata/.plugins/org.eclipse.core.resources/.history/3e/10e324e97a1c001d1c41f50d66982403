package com.example.controller;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import javax.transaction.Transactional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import com.example.model.SiteUser;
import com.example.util.Role;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
public class SecurityControllerTest {

	@Autowired
	MockMvc mockMvc;
	
	@Test
	@DisplayName("登録エラーがある場合、エラー表示することを期待します")
	void whenThereIsRegistrationError_expectToSeeErrors() throws Exception{
		mockMvc.perform(post("/register").flashAttr("user",new SiteUser()).with(csrf()))
		.andExpect(model().hasErrors())
		.andExpect(view().name("register"));
	}
	
	
	@Test
	@DisplayName("管理者ユーザとして登録する場合、成功することを期待します")
	void whenRegisteringAsAdminUser_expectToSuccees() throws Exception{
		var user = new SiteUser();
		
		user.setUsername("管理者ユーザ");
		user.setPassword("password");
		user.setEmail("admin@example.com");
		
		user.setGender(0);
		user.setRole(Role.ADMIN.name());
		user.setAdmin(false);
		
		mockMvc.perform(post("/register").flashAttr("user", user).with(csrf()))
		
		.andExpect(model().hasNoErrors())
		
		.andExpect(redirectedUrl("/login?register"))
		.andExpect(status().isFound());
		
	}
	
	@Test
	@DisplayName("管理者ユーザでログイン時、ユーザ一覧を表示することを期待しています")
	@withMockUser(username="admin",roles="ADMIN")
	void whenLoggedInAsAdminUser_expectToSeeListOfUser() throws Exception{
		
	}
}
